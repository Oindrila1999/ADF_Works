{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFDemoOindrila"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/lookup_trans_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empDataset_lkp_transformation",
								"type": "DatasetReference"
							},
							"name": "employee"
						},
						{
							"dataset": {
								"referenceName": "deptDataset_lkp_transformation",
								"type": "DatasetReference"
							},
							"name": "department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "out_lkp_trans_dataset",
								"type": "DatasetReference"
							},
							"name": "empwithdeptname"
						}
					],
					"transformations": [
						{
							"name": "lookupdept"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as string,",
						"          name as string,",
						"          country as string,",
						"          deptid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"source(output(",
						"          deptid as string,",
						"          deptname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> department",
						"employee, department lookup(employee@deptid == department@deptid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupdept",
						"lookupdept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          name as string,",
						"          sales as string,",
						"          date as string",
						"     ),",
						"     partitionFileNames:['Emp_with_dept_name.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> empwithdeptname"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/merge_queries_powerquery')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "empdataset_adls",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> empdataset_adls",
							"dataset": {
								"referenceName": "empdataset_adls",
								"type": "DatasetReference"
							}
						},
						{
							"name": "departmentdataset_adls",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> departmentdataset_adls",
							"dataset": {
								"referenceName": "departmentdataset_adls",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared empdataset_adls = let AdfDoc = AzureStorage.DataLakeContents(\"https://storageadlsdemooin.dfs.core.windows.net/adfdemooinadls/input/employees.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared departmentdataset_adls = let AdfDoc = AzureStorage.DataLakeContents(\"https://storageadlsdemooin.dfs.core.windows.net/adfdemooinadls/input/department.csv\"),Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]), PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true]) in  PromotedHeaders;\r\nshared UserQuery = let Source = #\"empdataset_adls\",\r\n  #\"Merged queries\" = Table.NestedJoin(Source, {\"deptid\"}, departmentdataset_adls, {\"deptid\"}, \"departmentdataset_adls\", JoinKind.Inner),\r\n  #\"Expanded departmentdataset_adls\" = Table.ExpandTableColumn(#\"Merged queries\", \"departmentdataset_adls\", {\"deptname\"}, {\"deptname\"}) in #\"Expanded departmentdataset_adls\";\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/new_branch_work_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empDataset_lkp_transformation",
								"type": "DatasetReference"
							},
							"name": "employee"
						},
						{
							"dataset": {
								"referenceName": "deptDataset_lkp_transformation",
								"type": "DatasetReference"
							},
							"name": "department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empcountdataset_sink",
								"type": "DatasetReference"
							},
							"name": "empcountsink"
						},
						{
							"dataset": {
								"referenceName": "joineddataset_sink",
								"type": "DatasetReference"
							},
							"name": "joineddatasink"
						}
					],
					"transformations": [
						{
							"name": "countemp"
						},
						{
							"name": "joinempdept"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          name as string,",
						"          country as string,",
						"          deptid as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"source(output(",
						"          deptid as integer,",
						"          deptname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> department",
						"employee aggregate(groupBy(deptid),",
						"     count_of_emp = count(empid)) ~> countemp",
						"employee, department join(employee@deptid == department@deptid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinempdept",
						"countemp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          deptname as string,",
						"          Employee_count as string",
						"     ),",
						"     partitionFileNames:['Emp_count_dept_wise.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> empcountsink",
						"joinempdept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          deptname as string,",
						"          Employee_count as string",
						"     ),",
						"     partitionFileNames:['Joined_emp_dept.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> joineddatasink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/parse_trans_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_tbl_employee",
								"type": "DatasetReference"
							},
							"name": "emptable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "out_parse_trans",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "parseskills"
						},
						{
							"name": "parseaddress"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          empname as string,",
						"          skills as string,",
						"          address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> emptable",
						"emptable parse(Parseskills = skills ? (skill1 as string,",
						"          skill2 as string,",
						"          skill3 as string),",
						"     format: 'delimited',",
						"     columnNamesAsHeader: false,",
						"     columnDelimiter: '|',",
						"     nullValue: '') ~> parseskills",
						"parseskills parse(Parseaddress = address ? (city as string,",
						"          country as string),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parseaddress",
						"parseaddress sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Parse_trans_out.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          empname,",
						"          skill1 = Parseskills.skill1,",
						"          skill2 = Parseskills.skill2,",
						"          skill3 = Parseskills.skill3,",
						"          city = Parseaddress.city,",
						"          country = Parseaddress.country",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pivot_trans_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "emp_source_dataset_for_pivot",
								"type": "DatasetReference"
							},
							"name": "empsource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pivot_out_sink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "pivotgender"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          gender as string,",
						"          country as string,",
						"          department as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> empsource",
						"empsource pivot(groupBy(department),",
						"     pivotBy(gender),",
						"     {} = count(id),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivotgender",
						"pivotgender sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          deptid as string,",
						"          count_of_emp as string",
						"     ),",
						"     partitionFileNames:['pivotted_output.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/rank_trans_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "input_ds_window_trans",
								"type": "DatasetReference"
							},
							"name": "empdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "out_ds_for_rank",
								"type": "DatasetReference"
							},
							"name": "rankedsink"
						}
					],
					"transformations": [
						{
							"name": "rankOnsalary"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          gender as string,",
						"          salary as integer,",
						"          dept as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empdata",
						"empdata rank(desc(salary, true),",
						"     output(salary_ranking as long)) ~> rankOnsalary",
						"rankOnsalary sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Out_ranked_sal.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          name,",
						"          gender,",
						"          salary,",
						"          dept,",
						"          salary_ranking",
						"     ),",
						"     partitionBy('hash', 1)) ~> rankedsink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/select_trans_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empDataset_lkp_transformation",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "emp_selected_dataset",
								"type": "DatasetReference"
							},
							"name": "selectedcolssink"
						}
					],
					"transformations": [
						{
							"name": "selectcolumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          name as string,",
						"          country as string,",
						"          deptid as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"employee select(mapColumn(",
						"          employee_id = empid,",
						"          country,",
						"          emp_name = name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectcolumns",
						"selectcolumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['selected_emp_data.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          employee_id,",
						"          country,",
						"          emp_name",
						"     ),",
						"     partitionBy('hash', 1)) ~> selectedcolssink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sort_trans_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empDataset_lkp_transformation",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "emp_sort_trans_dataset",
								"type": "DatasetReference"
							},
							"name": "emporderedsink"
						}
					],
					"transformations": [
						{
							"name": "sortdeptidcntry"
						}
					],
					"scriptLines": [
						"source(output(",
						"          empid as integer,",
						"          name as string,",
						"          country as string,",
						"          deptid as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"employee sort(asc(deptid, true),",
						"     desc(country, true)) ~> sortdeptidcntry",
						"sortdeptidcntry sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          empid as integer,",
						"          name as string,",
						"          country as string,",
						"          deptid as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          empid,",
						"          name,",
						"          country,",
						"          deptid",
						"     )) ~> emporderedsink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/stringify_trans_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_json_stringify",
								"type": "DatasetReference"
							},
							"name": "jsondata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "stringify_json_out",
								"type": "DatasetReference"
							},
							"name": "stringifysink"
						}
					],
					"transformations": [
						{
							"name": "stringify"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          skills as string[],",
						"          contact as (mobile as string, landline as string)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> jsondata",
						"jsondata stringify(contactStringify = contact ? string,",
						"     format: 'json') ~> stringify",
						"stringify derive(contactStringify = toString(contactStringify)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['stringify_out.json'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> stringifysink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/surr_key_trans_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "input_dataset_sugg_key",
								"type": "DatasetReference"
							},
							"name": "source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "surr_ds_output",
								"type": "DatasetReference"
							},
							"name": "surrkeysink"
						}
					],
					"transformations": [
						{
							"name": "surrogateKeygenerate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Country as string,",
						"          Emp as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source",
						"source keyGenerate(output(empid as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeygenerate",
						"surrogateKeygenerate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as string,",
						"          name as string,",
						"          sales as string,",
						"          date as string",
						"     ),",
						"     partitionFileNames:['surr_key_out.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> surrkeysink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/union_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "union_dataset_1",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "union_dataset_2",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "union_out_dataset",
								"type": "DatasetReference"
							},
							"name": "targetemp"
						}
					],
					"transformations": [
						{
							"name": "union2source"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          ename as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          id as integer,",
						"          ename as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source1, source2 union(byName: true)~> union2source",
						"union2source sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          ename as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          ename",
						"     )) ~> targetemp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/unpivot_trans_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "source_ds_unpivot",
								"type": "DatasetReference"
							},
							"name": "sourceforunpivot"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "unpivot_out_dataset",
								"type": "DatasetReference"
							},
							"name": "unpivotoutsink"
						}
					],
					"transformations": [
						{
							"name": "unpivot"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PO as integer,",
						"          Vendor as string,",
						"          Apple as integer,",
						"          Mango as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceforunpivot",
						"sourceforunpivot unpivot(output(",
						"          Fruits as string,",
						"          Amount as integer",
						"     ),",
						"     ungroupBy(Vendor,",
						"          PO),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivot",
						"unpivot sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          deptid as string,",
						"          count_of_emp as string",
						"     ),",
						"     partitionFileNames:['purcchase_order_unpivot.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> unpivotoutsink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/windows_trans_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "input_ds_window_trans",
								"type": "DatasetReference"
							},
							"name": "sourceforranking"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "window_trans_out_ds",
								"type": "DatasetReference"
							},
							"name": "windowssink"
						}
					],
					"transformations": [
						{
							"name": "windowtransbydept"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Filename as string",
						"}",
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          gender as string,",
						"          salary as integer,",
						"          dept as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceforranking",
						"sourceforranking window(over(dept),",
						"     desc(salary, true),",
						"     dense_rank = denseRank(),",
						"          rank = rank(),",
						"          row_num = rowNumber(),",
						"          cum_sum = cumeDist(),",
						"          avg_sal = avg(salary)) ~> windowtransbydept",
						"windowtransbydept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          deptid as string,",
						"          count_of_emp as string",
						"     ),",
						"     partitionFileNames:[($Filename)],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> windowssink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/write_cache_sink_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "input_ds_window_trans",
								"type": "DatasetReference"
							},
							"name": "empdata"
						}
					],
					"sinks": [
						{
							"name": "cacheMaxSal"
						}
					],
					"transformations": [
						{
							"name": "getmaxSal"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          gender as string,",
						"          salary as integer,",
						"          dept as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empdata",
						"empdata aggregate(max_sal = max(salary)) ~> getmaxSal",
						"getmaxSal sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: true,",
						"     saveOrder: 1,",
						"     mapColumn(",
						"          max_sal",
						"     )) ~> cacheMaxSal"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Alter_Row_trans_Dataflow_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Alter_Row_trans_Dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "alter_row_trans_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcedsemp": {},
									"sinktbloutput": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-02T12:36:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cache_Sink_Dataflow_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Cache_Sink_Dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "cache_sink_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emptable": {},
									"empdetails1": {},
									"countrytable": {},
									"cacheMaxEmpID": {},
									"cacheCountryName": {},
									"emptableinserts": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Execute_actvty_master_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute_1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy_pipeline_params",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								},
								"folder": {
									"value": "@pipeline().parameters.srcfolder",
									"type": "Expression"
								},
								"file": {
									"value": "@pipeline().parameters.srcfile",
									"type": "Expression"
								},
								"destFolder": {
									"value": "@pipeline().parameters.destfolder",
									"type": "Expression"
								},
								"destFile": {
									"value": "@pipeline().parameters.destfile",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute_2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute_1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Set_var_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"FileName": {
									"value": "@pipeline().parameters.srcfile",
									"type": "Expression"
								},
								"container": {
									"value": "@pipeline().parameters.container",
									"type": "Expression"
								},
								"sourceFolder": {
									"value": "@pipeline().parameters.srcfolder",
									"type": "Expression"
								},
								"destFolder": {
									"value": "@pipeline().parameters.destfolder",
									"type": "Expression"
								},
								"destFileext": {
									"value": "@pipeline().parameters.destFileExt",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"srcfolder": {
						"type": "string"
					},
					"srcfile": {
						"type": "string"
					},
					"destfolder": {
						"type": "string"
					},
					"destfile": {
						"type": "string"
					},
					"destFileExt": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-03-30T11:28:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Merge_queries_powerquery_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Merge_queries_powerquery",
						"type": "ExecuteWranglingDataflow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Execution of",
								"value": "Here we are executing the Power Query for wrangling data flow in ADF."
							}
						],
						"typeProperties": {
							"dataflow": {
								"referenceName": "merge_queries_powerquery",
								"type": "DataFlowReference",
								"datasetParameters": {
									"empdataset_adls": {},
									"departmentdataset_adls": {},
									"UserQueryempdeptpowerqueryds": {
										"Filename": {
											"value": "@pipeline().parameters.Filename",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"queries": [
								{
									"queryName": "UserQuery",
									"dataflowSinks": [
										{
											"name": "UserQueryempdeptpowerqueryds",
											"dataset": {
												"referenceName": "emp_dept_power_query_ds",
												"type": "DatasetReference",
												"parameters": {
													"Filename": {
														"value": "@pipeline().parameters.Filename",
														"type": "Expression"
													}
												}
											},
											"script": "sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdeptid as string,\n\t\tcount_of_emp as string\n\t),\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> UserQueryempdeptpowerqueryds"
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-04T05:34:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/merge_queries_powerquery')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parse_trans_dataflow_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Parse_trans_dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "parse_trans_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"emptable": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/parse_trans_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pivot_trans_dataflow_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Pivot_Dataflow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "pivot_trans_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empsource": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-04-01T15:19:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/pivot_trans_dataflow')]"
			]
		}
	]
}